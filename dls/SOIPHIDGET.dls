/******************************************************************************************************************************/
/* Module DLS de gestion du Thread 'PHIDGET'                                                                                  */
/* Auteurs : Sébastien Lefevre - sebastien.lefevre@abls-habitat.fr                                                            */
/* Date : 01/01/2025                                                                                                          */
/* 01/01/2025: Passage sous forme de package                                                                                  */
/******************************************************************************************************************************/

/*------------------------------------------ Définition des bits permanents du module ----------------------------------------*/
/* IO_COMM:      Bit de communication positionné par le thread lui-meme                                                       */
 #define IO_COMM      <-> _WATCHDOG(libelle="Etat communication avec le Phidget SOIPHIDGET");
 #define MSG_COMM_NOK <-> _MSG(type=danger, libelle="Unité PHIDGET SOIPHIDGET hors service", notif_sms=yes, notif_chat=yes );

/*----------------------------------------------------------------------------------------------------------------------------*/

/*------------------------------------------ Définition des bits locaux au module --------------------------------------------*/
 #define VISU_PHIDGET     <-> _I(forme="check", libelle="Module PHIDGET");  /* VIsuel de l'etat du VISU_PHIDGET */

/*------------------------------------------------- Logique fonctionnelle ----------------------------------------------------*/

 - IO_COMM -> VISU_PHIDGET(mode="checked", libelle="SOIPHIDGET connecté"); /* Si le thread dit que le PHIDGET est UP, on l'affiche */
 -/IO_COMM -> MEMSA_DEFAUT, MEMSSP_DANGER,
              VISU_PHIDGET(mode="unchecked", cligno, libelle="SOIPHIDGET déconnecté"),
              MSG_COMM_NOK;

/* Pilotage des bits de remontées */
 - _TRUE -> MEMSSB_VEILLE;

/*----------------------------------------------------------------------------------------------------------------------------*/
